
/*
 Example using the SparkFun HX711 breakout board with a scale
 By: Nathan Seidle
 SparkFun Electronics
 Date: November 19th, 2014
 License: This code is public domain but you buy me a beer if you use this and we meet someday (Beerware license).
 
 This is the calibration sketch. Use it to determine the calibration_factor that the main example uses. It also
 outputs the zero_factor useful for projects that have a permanent mass on the scale in between power cycles.
 
 Setup your scale and start the sketch WITHOUT a weight on the scale
 Once readings are displayed place the weight on the scale
 Press +/- or a/z to adjust the calibration_factor until the output readings match the known weight
 Use this calibration_factor on the example sketch
 
 This example assumes pounds (lbs). If you prefer kilograms, change the Serial.print(" lbs"); line to kg. The
 calibration factor will be significantly different but it will be linearly related to lbs (1 lbs = 0.453592 kg).
 
 Your calibration factor may be very positive or very negative. It all depends on the setup of your scale system
 and the direction the sensors deflect from zero state

 This example code uses bogde's excellent library: https://github.com/bogde/HX711
 bogde's library is released under a GNU GENERAL PUBLIC LICENSE

 Arduino pin 2 -> HX711 CLK
 3 -> DOUT
 5V -> VCC
 GND -> GND
 
 Most any pin on the Arduino Uno will be compatible with DOUT/CLK.
 
 The HX711 board can be powered from 2.7V to 5V so the Arduino 5V power should be fine.
 
*/
//-------------------------------------------------------

// Variables will change:
int ledState = LOW;             // ledState used to set the LED

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated
const long interval = 1000;           // interval at which to blink (milliseconds)
//-------------------------------------------------------
#include "HX711.h"
#define DOUT  4
#define CLK  5
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
int pin         =  6; // On Trinket or Gemma, suggest changing this to 1

// How many NeoPixels are attached to the Arduino?
int numPixels   = 4; // Popular NeoPixel ring size

// NeoPixel color format & data rate. See the strandtest example for
// information on possible values.
int pixelFormat = NEO_GRB + NEO_KHZ800;

// Rather than declaring the whole NeoPixel object here, we just create
// a pointer for one, which we'll then allocate later...
Adafruit_NeoPixel *pixels;

#define DELAYVAL 2000 // Time (in milliseconds) to pause between pixels

HX711 scale;
  int i = 0;
float calibration_factor = -329; //-7050 worked for my 440lb max scale setup
float Weight;
float Weight2;




//-------------------------------------------------------

void setup() {
//  Timer1.initialize(USPT);
//  Timer1.attachInterrupt(ticker);
  
  
  #if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  Serial.begin(115200);
  //Serial.println("HX711 calibration sketch");
  //Serial.println("Remove all weight from scale");
  //Serial.println("After readings begin, place known weight on scale");
  //Serial.println("Press + or a to increase calibration factor");
  //Serial.println("Press - or z to decrease calibration factor");
  scale.begin(DOUT, CLK);
  scale.set_scale();
  scale.tare();	//Reset the scale to 0

  long zero_factor = scale.read_average(); //Get a baseline reading
 // Serial.print("Zero factor: "); //This can be used to remove the need to tare the scale. Useful in permanent scale projects.
 // Serial.println(zero_factor);
   pixels = new Adafruit_NeoPixel(numPixels, pin, pixelFormat);

  // Going forward from here, code works almost identically to any other
  // NeoPixel example, but instead of the dot operator on function calls
  // (e.g. pixels.begin()), we instead use pointer indirection (->) like so:
  pixels->begin(); // INITIALIZE NeoPixel strip object (REQUIRED)
  // You'll see more of this in the loop() function below.

  pinMode(10,OUTPUT);
}
//-------------------------------------------------------
void loop() 
{
  //Adjust to this calibration factor
  scale.set_scale(calibration_factor);
 Weight=scale.get_units();
 Weight2=scale.get_units();
  Serial.println(Weight2);
  //Change this to kg and re-adjust the calibration factor if you follow SI units like a sane person
  //기존 예제가 파운드(lbs) 기준이지만 우리는 킬로그램(kg)을 쓸것이므로 'kg'로 바꿉시다.
  //Serial.print(" g"); 
  //Serial.print(" calibration_factor: ");
  //Serial.print(calibration_factor);
 
  if(Serial.available())
  {
    char temp = Serial.read();
 
    //변경 : 보정값 범위 설정 가능하도록 변경
    switch(temp)
    {
      case '1':
        calibration_factor += 10;
        break;
      case '2':
        calibration_factor += 50;
        break;
      case '3':
        calibration_factor += 100;
        break;
      case '4':
        calibration_factor += 1000;
             case '5':
        calibration_factor += 1;
        break;
 
      case 'a':
        calibration_factor -= 10;
        break;
      case 's':
        calibration_factor -= 50;
        break;
      case 'd':
        calibration_factor -= 100;
        break;
      case 'f':
        calibration_factor -= 1000;
              case 'g':
        calibration_factor -= 1;
        break;
    }
  }

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    pixels->setPixelColor(0, pixels->Color(150, 0, 0));
    pixels->setPixelColor(1, pixels->Color(150, 0, 0));
    pixels->setPixelColor(2, pixels->Color(30, 30, 30));
    pixels->setPixelColor(3, pixels->Color(30, 30, 30));
    pixels->show();   // Send the updated pixel colors to the hardware.
    } else {
      ledState = LOW;
    pixels->setPixelColor(0, pixels->Color(0, 0, 0));
    pixels->setPixelColor(1, pixels->Color(0, 0, 0));
    pixels->setPixelColor(2, pixels->Color(30, 30, 30));
    pixels->setPixelColor(3, pixels->Color(30, 30, 30));
    pixels->show();
    }

  }

  if ((currentMillis >=14000)&&(currentMillis <=24000)){
    digitalWrite(10,LOW);
    pixels->setPixelColor(0, pixels->Color(0,150,  0));
    pixels->setPixelColor(1, pixels->Color(0,150,  0));
    pixels->setPixelColor(2, pixels->Color(0,150,  0));
    pixels->setPixelColor(3, pixels->Color(0,150,  0));
    pixels->show();
  }
  else digitalWrite(10,HIGH);
//static long secound_count = 0;
//  if( secound_flag ) {
//        secound_flag = f_disabled;
//
//        if (secound_flag%1 == 0) {
//          // 30분마다 할 일
//    pixels->setPixelColor(0, pixels->Color(0, 0, 0));
//    pixels->setPixelColor(1, pixels->Color(0, 0, 0));
//    pixels->show();   // Send the updated pixel colors to the hardware.
//        }
//        if (secound_flag%2 == 0) {
//    pixels->setPixelColor(0, pixels->Color(150, 0, 0));
//    pixels->setPixelColor(1, pixels->Color(150, 0, 0));
//    pixels->show();   // Send the updated pixel colors to the hardware.
//
//        }
//
//        secound_count++;
//        secound_count%=2; 
//  }


// i++;
// if(i>=200)i=0;
//    
//else if(i>=100) {
//    pixels->setPixelColor(0, pixels->Color(0, 0, 0));
//    pixels->setPixelColor(1, pixels->Color(0, 0, 0));
//    pixels->show(); }  // Send the updated pixel colors to the hardware.
//else {
//    pixels->setPixelColor(0, pixels->Color(150, 0, 0));
//    pixels->setPixelColor(1, pixels->Color(150, 0, 0));
//    pixels->show(); }  // Send the updated pixel colors to the hardware.

}
